import { Strategy as OAuth2Strategy } from "passport-oauth2";
import { Profile as OAuth2Profile } from "@oauth-everything/profile";
import { ExtendableStrategyOptions, ExtendableStrategyOptionsWithRequest, OAuth2VerifyCallback, OAuth2VerifyFunction, OAuth2VerifyFunctionWithRequest, OAuth2VerifyFunctionWithResults, OAuth2VerifyFunctionWithRequestAndResults } from "@oauth-everything/oauth2-types";
import { User } from "./ApiData/User";
export interface TokenResponse {
    access_token: string;
    token_type: string;
    expires_in: number;
    refresh_token: string;
    scope: string;
}
export declare type Profile = OAuth2Profile<User>;
export declare type StrategyOptions = ExtendableStrategyOptions<{}>;
export declare type StrategyOptionsWithRequest = ExtendableStrategyOptionsWithRequest<{}>;
export declare type VerifyCallback<TUser = object, TInfo = object> = OAuth2VerifyCallback<TUser, TInfo>;
export declare type VerifyFunction<TUser, TInfo> = OAuth2VerifyFunction<Profile, TUser, TInfo>;
export declare type VerifyFunctionWithRequest<TUser, TInfo> = OAuth2VerifyFunctionWithRequest<Profile, TUser, TInfo>;
export declare type VerifyFunctionWithResults<TUser, TInfo> = OAuth2VerifyFunctionWithResults<TokenResponse, Profile, TUser, TInfo>;
export declare type VerifyFunctionWithRequestAndResults<TUser, TInfo> = OAuth2VerifyFunctionWithRequestAndResults<TokenResponse, Profile, TUser, TInfo>;
export declare class Strategy<TUser = object, TInfo = object> extends OAuth2Strategy {
    name: string;
    constructor(options: StrategyOptions, verify: VerifyFunction<TUser, TInfo> | VerifyFunctionWithResults<TUser, TInfo>);
    constructor(options: StrategyOptionsWithRequest, verify: VerifyFunctionWithRequest<TUser, TInfo> | VerifyFunctionWithRequestAndResults<TUser, TInfo>);
    userProfile(accessToken: string, done: (err?: Error | null, profile?: Profile | null) => void): void;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const passport_oauth2_1 = require("passport-oauth2");
const Scope_1 = require("./Scope");
const Util_1 = require("./Util");
class Strategy extends passport_oauth2_1.Strategy {
    constructor(options, verify) {
        super({
            authorizationURL: "https://discordapp.com/api/oauth2/authorize",
            tokenURL: "https://discordapp.com/api/oauth2/token",
            scope: [Scope_1.Scope.IDENTIFY],
            ...options
        }, verify);
        this.name = "discord";
    }
    userProfile(accessToken, done) {
        this._oauth2.useAuthorizationHeaderforGET(true);
        this._oauth2.get("https://discordapp.com/api/users/@me", accessToken, (error, result) => {
            if (error)
                return done(new passport_oauth2_1.InternalOAuthError("Failed to fetch user profile", error));
            let json;
            try {
                json = JSON.parse(result);
            }
            catch (parseError) {
                return done(new passport_oauth2_1.InternalOAuthError("Failed to parse user profile", parseError));
            }
            done(null, {
                provider: this.name,
                id: json.id,
                username: json.username,
                displayName: `${json.username}#${json.discriminator}`,
                created: Util_1.snowflakeToDate(json.id),
                emails: json.email ? [{ value: json.email, verified: json.verified }] : undefined,
                photos: Util_1.buildPhotos(json),
                _raw: result,
                _json: json
            });
        });
    }
}
exports.Strategy = Strategy;
//# sourceMappingURL=Strategy.js.map